import sys
import numpy as np

from ioh import get_problem, logger, ProblemClass, Experiment


def RandomSearch(problem, budget=None):
    """Implementation of random search optimization algorithm.

    problem: a callable problem, generated by get_problem() from ioh package
    budget: int, None means 50n^2, where n is problem's dimensionality
    """
    n = problem.meta_data.n_variables
    y_opt = sys.float_info.max
    _budget = 50*n**2 if budget == None else budget
    while _budget:
        x = np.random.uniform(problem.bounds.lb, problem.bounds.ub)
        y = problem(x)
        _budget -= 1
        if y < y_opt:
            y_opt = y
    print("y_opt: {}".format(y_opt))


print(RandomSearch.__doc__)

# example 1, expeirment the algorithm step by step
print('###############################Example 1###############################')
# step 1, get a BBOB problem (with fid 1, instance id 1, dimensionality 20)
problem = get_problem(fid=1, instance=1, dimension=20,
                      problem_class=ProblemClass.BBOB)
# step 2, create a ioh.logger to log the experiment data for further analyzing
# on IOHanalyzer
l = logger.Analyzer(
    root="data_examples",
    folder_name="example_1",
    algorithm_name="random search, example 1",
    algorithm_info=""
)
# step 3, attach the logger to the problem
problem.attach_logger(l)
# step 4, run the algorithm that optimize on the problem attached by logger
RandomSearch(problem)
del l, problem

# example 2, a quick start of ioh.Experiment
print('###############################Example 2###############################')
# a very basic setup of ioh.Experiment
exp = Experiment(algorithm=RandomSearch, fids=[1, 5, 24], iids=[1],
                 dims=[5, 20], reps=10, problem_class=ProblemClass.BBOB)
# run the experiment
exp()

# example 3, a more comprehensive example of ioh.Experiment
print('###############################Example 2###############################')
exp = Experiment(algorithm=RandomSearch, fids=[1, 5, 24], iids=[1],
                 dims=[5, 20], reps=10, problem_class=ProblemClass.BBOB,
                 output_directory="data_examples", folder_name="example_3",
                 algorithm_name="random search, example 3", algorithm_info="")
exp()
